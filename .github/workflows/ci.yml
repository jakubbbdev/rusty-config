name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.70, stable, beta, nightly]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install dependencies
      run: |
        rustup component add rustfmt
        rustup component add clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features

    - name: Run examples
      run: |
        cargo run --example basic_usage
        cargo run --example validation

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: Generate documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [test, docs, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, docs, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from Cargo.toml
      id: get_version
      run: echo "version=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## 🚀 What's New in v${{ steps.get_version.outputs.version }}
          
          ### ✨ Features
          - Hot-Reload für Konfigurationsdateien
          - Robuste Validierung von Konfigurationsdaten
          - Unterstützung für YAML, JSON und TOML
          - Vollständig asynchrone API
          - Stark typisierte Konfigurationen
          - Builder Pattern für benutzerfreundliche API
          
          ### 🔧 Improvements
          - Umfassende Fehlerbehandlung
          - Detaillierte Dokumentation
          - Vollständige Testabdeckung
          
          ### 📚 Documentation
          - [API Documentation](https://docs.rs/rusty-config)
          - [Examples](https://github.com/yourusername/rusty-config/tree/main/examples)
          
          ### 🛠️ Installation
          ```toml
          [dependencies]
          rusty-config = "${{ steps.get_version.outputs.version }}"
          ```
        draft: false
        prerelease: false 